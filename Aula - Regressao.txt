---
title: "Regressão: Uma abordagem matricial"
author: "Rafael Pentiado Poerschke"
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
  html_document:
      highlight: textmate
      theme: flatly
      number_sections: yes 
      toc: yes
      toc_float: 
          collapsed: yes
          smooth_croll: no
  pdf_document: default
editor_options:
  markdown:
    wrap: 72
---
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
require(knitr)
require(kableExtra)
```

# Matrizes e MQO

**Objetivos:** 
Calcular todos os *vetores* e *matrizes* necessários para estimar os <span style="color: red;">parâmetros</span>. Revisar operações de ***álgebra linear*** e <u>comandos do R</u>. 

Começamos com a criação dos Vetores: sbp (pressão sanguinea); peso e idade. Nosso objetivo é compreender como as variáveis peso e idade afetam a pressão na referida amostra hipotética.
```{r data frame}
#Criar vetores
sbp <- c(89,90,83,77,92,98,82,85,96,95,80,79,86,97,92,88)
peso <- c(135,120,100,105,130,125,125,105,120,90,120,95,120,150,160,125)
idade <- c(3,4,3,2,4,5,2,3,5,4,2,3,3,4,3,3)
#Juntar os três vetores em um dataframe
exercicio1 <- data.frame(sbp, peso, idade)
exercicio1
```

**Tabela Kable**: podemos criar uma tabela.
```{r tabela1}
knitr::kable(exercicio1, "pipe", col.names = c("SBP", "Peso", "Idade"), align = c("l", "c", "c")) 

```
**Tabela Kable**: Observe que podemos criar uma tabela mais elaborada com a adição de alguns comandos. Listras, marcação ao passar o mouse sobre, bem como deixar as colunas próximas umas da outras. 
```{r}
kable(exercicio1) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F)
```
**Vetores**: atribuindo valores para um determinado vetor. Nesse caso, iremos criar nosso vetor da variável dependente Y, e nossa matriz X de variáveis explicativas mais uma constante.

$$\mathbf{X}_{n \times (k+1)}=\left[\begin{array}{c}
1 & x_{11} & x_{21} & \ldots & x_{1k}\\
1 & x_{21} & x_{22} & \ldots & \vdots\\
\vdots & \vdots & \vdots & \ddots \\
1 & x_{n1} & \vdots & \ldots & x_{nk}
\end{array}\right]; \quad \vec{Y}_{n \times 1}=\left[\begin{array}{ccccc}
y_{1}\\
y_{2}\\
\vdots \\
y_{n} 
\end{array}\right]$$

```{r data}
Y <- matrix( c(89,90,83,77,92,98,82,85,96,95,80,79,86,97,92,88), ncol=1 )
X <- matrix( c( rep(1, length(Y)),
                c(135,120,100,105,130,125,125,105,120,90,120,95,120,150,160,125),
                c(3,4,3,2,4,5,2,3,5,4,2,3,3,4,3,3)), 
             ncol=3, byrow=F)
#Observe que teremos 3 colunas; uma de uns criada pelo comando rep(1,... seguido do comprimento (length) de Y, e as demais colunas de X
#Criando uma matriz
cbind(Y,X)
```

## $X^{T}X$
Para chegarmos nos parâmetros, precisamos estimar o vetor de betas, tal que $\hat{\beta}=(X^{\prime}X)^{-1}X^{\prime}Y$. Então, começamos pela lado direito da expressão, e assim já iremos descobrir os comandos de multiplicação de matrizes e transposição.

Matriz transposta depende do comando `t(nome_matriz)`
Observe que o comando `echo` aparece no code chunk. Esse comando quando TRUE apresenta a linha digitada e será seguida do resultado.Ainda podem aparecer `include` FALSE fala que o código dentro do code chunk deve rodar e não deve ser mostrado qualquer evidêcnia disso no documento. Ainda, temos a opção `error`que havendo qualquer erro no código, se TRUE, o documento será igualemnte compilado. Temos `warning` e `message`que por sua vez ao estare FALSE irão excluir do documento final qualquer mendasagem das linhas de código ao serem rodadas.`tidy`opction? Pesquisa aí para ver o que acontece.
```{r pressure, echo=TRUE}
XtX <- t(X) %*% X
XtX
```

## $X^{T}Y$
**Multiplicação de Matrizes** é feito pelo comando `%*%`

```{r}
XtY <- t(X) %*% Y
XtY
```

## $Y^{T}Y$
Precisamos de `Y^{T}Y`pois iremos logo calcular a variância do erro e para isso iremos utilizar a fórmula
$$
SQE=(\vec{Y}-\mathbf{X}\vec{\beta})^{T}(\vec{Y}-\mathbf{X}\vec{\beta})=\vec{Y}^{T}\vec{Y}-\vec{\beta}^{T}\mathbf{X}^{T}\vec{Y}
$$

## $Y^{T}Y$

```{r}
YtY <- t(Y) %*% Y
YtY
```

## $(X^{T}X)^{-1}$
**Matriz Inversa** pelo pacote nativo fazemos `solve(matriz)`

```{r}
XtX_inv <- solve(XtX)
XtX_inv
```

## Calculando a matriz de parâmetros
Agora podemos aplicar $(X^{T}X)X^{T}Y=\vec{\beta}$:
```{r}
beta_vec <- XtX_inv %*% t(X) %*% Y
beta_vec
```
## Cálculo do MSE - Erro Quadrado (i.e., the variance of Y|X)

Sabemos que a variância do erro da regressão é calculada após termos estimados o $\hat{Y}$, tal que esperamos $\text{Var}(u|X)=\sigma^2$, isto é

$$\sigma^{2}=\tfrac{u^{\prime}u}{n-k-1}$$
para $n$ observações e $k$ variáveis.
```{r}
#função length()
mse <- ( YtY - t(beta_vec) %*% t(X) %*% Y ) / ( length(Y) - 2 - 1 ) #denominator is n-k-1, where n=16, k=2 (2 var diferentes)
mse
```


## Calculado a matriz de covariança para os betas
Agora que temos a variância do modelo, podemos calcular a variância para os betas estimados, isto é
$$Est[\text{Var}(\beta|X)]=\sigma^{2}(X^{\prime}X)^{-1}$$
Assim, no R fazemos
```{r}
Sigma_mat <- XtX_inv * as.numeric( mse ) #nota: foi preciso converter o sigma^2(Y|X) a 1x1 matriz em um objeto numérico, caso contrário, teríamos um erro "Error...non-conformable arrays". Ainda, * é o símbolo de multplicador clássico
Sigma_mat
```
## Testando a variânca do $\beta_{1}$
Vamos primeiro criar um vetor, de uma linha e com apenas o elemento do meio do vetor não-nulo. Assim, se multiplicarmos esse vetor `beta_vec` iremos isolar $\beta_{1}$
```{r}
c_vec <- matrix(c(0,1,0), nrow=1) 
c_vec
```
## Extraindo o $\beta_{1}$
```{r}
beta_1 <- c_vec %*% beta_vec
beta_1
```
## Calcular a Var $\beta_{1}$
De posse de todas as variáveis necessárias, podemos agora calcular a variância do parâmentro estimado
```{r}
var_beta_1 <- c_vec %*% XtX_inv %*% t(c_vec) * as.numeric(mse)
var_beta_1
```
E o erro padrão de $\hat{\beta}_{1}$ é a raiz quadrada da variância, tal que
```{r}
ep_beta1 = sqrt(var_beta_1)
ep_beta1
```

## Erro padrão de todos estimadores
Os erros padrão são a raiz quadrada dos elementos da diagonal princial de `Sigma_mat`, assim podemos calcular todos de uma única só vez
```{r}
ep = sqrt(diag(Sigma_mat))
ep
```

## Cálculo do t-statistic
Essa estatística é dada por $t_{n-k-1}=\tfrac{\hat{\beta_{j}}}{ep(\hat{\beta}_{j})}$, com $n-k-1$ graus de liberdade. 
```{r}
t_stat <- beta_1 / sqrt( var_beta_1 )
t_stat
```
Assim, para um nível de significância $\alpha$ escolhido, iremos construir um intervalo de confiança $H_{0}$ e veriricarmos se o valor $prob<\alpha$. Esse valor está calculado na parte seguinte.
## Cálculo do p-value (two-sided t-test)
```{r}
pval <- 2 * (1-pt( t_stat, df = length(Y) - 2 - 1) ) # df = n-k-1
pval
```
## Colocando tudo junto
Testamos em um intervalo para 5%, tal que 
$$\hat{\beta}_{k}-t_{\tfrac{\alpha}{2}}\text{Ep}_{\hat{\beta_{k}}}\leq\beta_{k}\leq\hat{\beta}_{k}-t_{\tfrac{\alpha}{2}}\text{Ep}_{\hat{\beta_{k}}}$$
```{r}
lci <- beta_1 - qt(0.975,13)*sqrt(var_beta_1) #lower
#13 equivale a 16-2-1
uci <- beta_1 + qt(0.975,13)*sqrt(var_beta_1) #upper
c(lci, uci)
```
Assim, temos que $0.05140\leq 0.1255833\leq 0.19976$
Existe um significativo aumento da Pressão no Sangue PSB (mmHg) para uma unidade de aumento no peso (oz) (p=0.0029). Na média, para o aumento de uma onça no peso corporal, a PSB aumento em 0.1255833 mmHg (95% CI: 0.0514044, 0.1997621), quando controlado a idade.
## ANOVA: Análise de Variância conjunta dos Parâmetros

## Compare results to linear regression output
```{r pacote}
birth <- data.frame(
  sbp = c(89,90,83,77,92,98,82,85,96,95,80,79,86,97,92,88),
  wgt = c(135,120,100,105,130,125,125,105,120,90,120,95,120,150,160,125),
  age = c(3,4,3,2,4,5,2,3,5,4,2,3,3,4,3,3)
)
mod1 <- lm(sbp ~ wgt + age, data=birth)
summary(mod1)
```

```{r}
confint(mod1)
```


